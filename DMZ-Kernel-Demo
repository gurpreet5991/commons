node{
def branch = env.NEXT_BRANCH_NAME
projectToBuild = 'kernel'
stage('------- Checkout --------') {
  // Checkout only Registration-Processor Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip.git', credentialsId:'e80f93ea-49d6-46b6-87df-f7d02dc0e1cf']
    ],
      extensions: [
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: '/' + projectToBuild + '/']
     ]]
    ],
   ])
   }
  }
  stage('Demo'){
    dir(branch){
      sh "dirname `find . -name 'Dockerfile'`> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   for (int i = 0; i < locationOfDockerFiles.size(); i++) {
       def currentModule = locationOfDockerFiles[i]
       
        sh "basename $currentModule > moduleName"
     moduleName = readFile('moduleName').trim()
     sh "rm -f moduleName"
     if(!moduleName === kernel-keymanager-service){
          echo moduleName
     }
    // modulePath = locationOfDockerFiles[i].substring(2);
     
     //sh "dirname $currentModule > parentDirectory"
     //def parentDirectory = readFile('parentDirectory').trim()
     //parentDirectory = parentDirectory.substring(2);
     
     //echo parentDirectory 
     }
    }
   }
 }
 
 
