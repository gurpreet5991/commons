node{
def branch = env.NEXT_BRANCH_NAME
projectToBuild = 'kernel'
stage('------- Checkout --------') {
  // Checkout only Registration-Processor Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip.git', credentialsId:'e80f93ea-49d6-46b6-87df-f7d02dc0e1cf']
    ],
      extensions: [
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: '/' + projectToBuild + '/']
     ]]
    ],
   ])
   }
  }
  stage('Demo'){
    dir(branch){
      sh "dirname `find . -name 'Dockerfile'`> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   for (int i = 0; i < locationOfDockerFiles.size(); i++) {
       def currentModule = locationOfDockerFiles[i]
       
        sh "basename $currentModule > moduleName"
     moduleName = readFile('moduleName').trim()
     sh "rm -f moduleName"
     if(!(moduleName == 'kernel-keymanager-service')){
          echo moduleName
     }     
   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '305c7f35-2eb5-44b4-b574-a0855ef70c26',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def label_env=env.NEXT_BRANCH_NAME
sh """ssh  madmin@13.71.86.138 /bin/bash << EOF
sudo docker login -u "${USERNAME}" -p "${PASSWORD}"  docker-registry.mosip.io:5000 
sudo docker ps -aq | xargs sudo docker stop | xargs sudo docker rm
sudo docker images -q | xargs sudo docker rmi
echo "Echoing label_env"
echo "${label_env}"
sudo docker run -tid --ulimit memlock=-1 -p 8088:8088 -v softhsm:/softhsm -e spring_config_url_env=http://kernel-config-server:51000/config -e spring_config_label_env="${label_env}" -e active_profile_env=dev --name keymanager docker-registry.mosip.io:5000/kernel-keymanager-service
EOF"""
    }

     }
    }
   }
 }
 
 
