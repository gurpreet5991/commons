<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="6" total="47" passed="40">
  <reporter-output>
  </reporter-output>
  <suite name="Mosip API Suite" duration-ms="108688" started-at="2019-07-03T12:14:10Z" finished-at="2019-07-03T12:15:58Z">
    <groups>
    </groups>
    <test name="PreReg Tests" duration-ms="108688" started-at="2019-07-03T12:14:10Z" finished-at="2019-07-03T12:15:58Z">
      <class name="io.mosip.preregistration.tests.GetAllDocumentForPreRegId">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="219" started-at="2019-07-03T17:45:39Z" finished-at="2019-07-03T17:45:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@15cee630]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegId_smoke" duration-ms="3797" started-at="2019-07-03T17:45:39Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1009","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"smoke","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegId_smoke","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegId_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:43Z" finished-at="2019-07-03T17:45:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2e40fdbd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:43Z" finished-at="2019-07-03T17:45:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegId_smoke status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue" duration-ms="1437" started-at="2019-07-03T17:45:43Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"invalid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1003","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:45:44Z" finished-at="2019-07-03T17:45:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@246de37e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:44Z" finished-at="2019-07-03T17:45:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric" duration-ms="3606" started-at="2019-07-03T17:45:44Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"invalid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1001","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:48Z" finished-at="2019-07-03T17:45:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:48Z" finished-at="2019-07-03T17:45:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@19647566]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets" duration-ms="1218" started-at="2019-07-03T17:45:48Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"invalid","jiraId":"MOS-1000","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:49Z" finished-at="2019-07-03T17:45:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b79ff1c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:49Z" finished-at="2019-07-03T17:45:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" duration-ms="3762" started-at="2019-07-03T17:45:49Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1004","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"invalid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:53Z" finished-at="2019-07-03T17:45:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:45:53Z" finished-at="2019-07-03T17:45:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@527d48db]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" duration-ms="1265" started-at="2019-07-03T17:45:53Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1002","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"invalid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="157" started-at="2019-07-03T17:45:55Z" finished-at="2019-07-03T17:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@194037f9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:55Z" finished-at="2019-07-03T17:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" duration-ms="3574" started-at="2019-07-03T17:45:55Z" data-provider="GetAllDocumentForPreRegId" finished-at="2019-07-03T17:45:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForPreRegId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_Alphabets":"valid","jiraId":"MOS-1005","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","testCaseName":"GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters","GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters":"invalid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForPreRegId_GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03]" test-instance-name="GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:58Z" finished-at="2019-07-03T17:45:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForPreRegIdByPassingInvalidPreRegistrationId_SpecialCharacters status=SUCCESS method=GetAllDocumentForPreRegId.getAllDocumentForPreRegId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForPreRegId@44ebcd03] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.preregistration.tests.GetAllDocumentForPreRegId -->
      <class name="io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID">
        <test-method status="PASS" signature="suiteSetup()[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="suiteSetup" is-config="true" duration-ms="15223" started-at="2019-07-03T17:43:54Z" finished-at="2019-07-03T17:44:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="5105" started-at="2019-07-03T17:44:10Z" finished-at="2019-07-03T17:44:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2dbf2da]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegId_smoke" duration-ms="2137" started-at="2019-07-03T17:44:15Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1000","testType":"smoke","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegId_smoke","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegId_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:17Z" finished-at="2019-07-03T17:44:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegId_smoke status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="343" started-at="2019-07-03T17:44:17Z" finished-at="2019-07-03T17:44:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7db162f2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces" duration-ms="141" started-at="2019-07-03T17:44:17Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"invalid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1006","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:44:17Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@64f3991e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:17Z" finished-at="2019-07-03T17:44:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets" duration-ms="172" started-at="2019-07-03T17:44:18Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"invalid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1001","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="201" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@39e3ea78]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric" duration-ms="145" started-at="2019-07-03T17:44:18Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"invalid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1002","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="157" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@35e689a0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength" duration-ms="156" started-at="2019-07-03T17:44:18Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"invalid","jiraId":"MOS-1005","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="187" started-at="2019-07-03T17:44:18Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@43b6cb1c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters" duration-ms="141" started-at="2019-07-03T17:44:19Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1003","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"invalid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3bf5911d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters" duration-ms="143" started-at="2019-07-03T17:44:19Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1007","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"invalid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="getTestCaseName" is-config="true" duration-ms="159" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1de30c31]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" duration-ms="140" started-at="2019-07-03T17:44:19Z" data-provider="DeleteAllDocumentsByPreRegID" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteAllDocumentsByPreRegID]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Spaces":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_Alphabets":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumeric":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_GreaterThanMaxLength":"valid","jiraId":"MOS-1004","testType":"regression","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_AlphaNumericAndSpecialCharacters":"valid","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_SpecialCharacters":"valid","testCaseName":"DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue","DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue":"invalid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteAllDocumentsByPreRegID_DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue status=SUCCESS method=DeleteAllDocumentsByPreRegID.deleteAllDocumentsByPreRegID(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="testTearDown(org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID@7c729a55]" test-instance-name="DeleteAllDocumentForPreRegisrationIdByPassingInvalidPreRegisrationId_EmptyValue" name="testTearDown" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:58Z" finished-at="2019-07-03T17:45:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTearDown -->
      </class> <!-- io.mosip.preregistration.tests.DeleteAllDocumentsByPreRegID -->
      <class name="io.mosip.preregistration.tests.GetAllDocumentForDocId">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:44:56Z" finished-at="2019-07-03T17:44:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@ca2cd5e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentForDocId_smoke" duration-ms="2569" started-at="2019-07-03T17:44:56Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"smoke","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1015","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentForDocId_smoke","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentForDocId_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:44:59Z" finished-at="2019-07-03T17:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@a120b9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:59Z" finished-at="2019-07-03T17:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentForDocId_smoke status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue" duration-ms="4366" started-at="2019-07-03T17:44:59Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"invalid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1008","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:03Z" finished-at="2019-07-03T17:45:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@333e5fb6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:03Z" finished-at="2019-07-03T17:45:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters" duration-ms="1075" started-at="2019-07-03T17:45:03Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"invalid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1011","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-03T17:45:04Z" finished-at="2019-07-03T17:45:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3b7b0b57]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:04Z" finished-at="2019-07-03T17:45:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric" duration-ms="5704" started-at="2019-07-03T17:45:05Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"invalid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1006","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="171" started-at="2019-07-03T17:45:10Z" finished-at="2019-07-03T17:45:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@21a9f95b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:10Z" finished-at="2019-07-03T17:45:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters" duration-ms="4092" started-at="2019-07-03T17:45:11Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"invalid","jiraId":"MOS-1002","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:15Z" finished-at="2019-07-03T17:45:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="170" started-at="2019-07-03T17:45:15Z" finished-at="2019-07-03T17:45:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2804b13f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets" duration-ms="1380" started-at="2019-07-03T17:45:15Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"invalid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1000","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="140" started-at="2019-07-03T17:45:16Z" finished-at="2019-07-03T17:45:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69069866]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:16Z" finished-at="2019-07-03T17:45:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" duration-ms="3555" started-at="2019-07-03T17:45:16Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"invalid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1009","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:20Z" finished-at="2019-07-03T17:45:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:45:20Z" finished-at="2019-07-03T17:45:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@ac417a2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength" duration-ms="1358" started-at="2019-07-03T17:45:20Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1004","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"invalid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="416" started-at="2019-07-03T17:45:21Z" finished-at="2019-07-03T17:45:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@64c95480]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:21Z" finished-at="2019-07-03T17:45:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue" duration-ms="3575" started-at="2019-07-03T17:45:22Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"invalid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1003","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:25Z" finished-at="2019-07-03T17:45:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69499c6f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:25Z" finished-at="2019-07-03T17:45:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets" duration-ms="1260" started-at="2019-07-03T17:45:26Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1005","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"invalid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:27Z" finished-at="2019-07-03T17:45:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-03T17:45:27Z" finished-at="2019-07-03T17:45:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3451fc88]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric" duration-ms="6327" started-at="2019-07-03T17:45:27Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1001","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"invalid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:33Z" finished-at="2019-07-03T17:45:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-03T17:45:33Z" finished-at="2019-07-03T17:45:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e0294a7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters" duration-ms="3657" started-at="2019-07-03T17:45:33Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"invalid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1010","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testCaseName":"GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:45:37Z" finished-at="2019-07-03T17:45:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3041beb3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:37Z" finished-at="2019-07-03T17:45:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" duration-ms="1344" started-at="2019-07-03T17:45:37Z" data-provider="GetAllDocumentForDocId" finished-at="2019-07-03T17:45:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/GetAllDocumentForDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","testType":"regression","GetAllDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","GetAllDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1007","GetAllDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","GetAllDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"invalid","testCaseName":"GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0]" test-instance-name="GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:45:39Z" finished-at="2019-07-03T17:45:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters status=SUCCESS method=GetAllDocumentForDocId.getAllDocumentForDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.GetAllDocumentForDocId@323b36e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.preregistration.tests.GetAllDocumentForDocId -->
      <class name="io.mosip.preregistration.tests.DeleteDocumentByDocId">
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-03T17:44:19Z" finished-at="2019-07-03T17:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1cc93da4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocmentId_smoke" duration-ms="3767" started-at="2019-07-03T17:44:20Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"smoke","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1015","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocmentId_smoke","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocmentId_smoke -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="153" started-at="2019-07-03T17:44:23Z" finished-at="2019-07-03T17:44:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69d2fb0a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:23Z" finished-at="2019-07-03T17:44:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocmentId_smoke status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets" duration-ms="1442" started-at="2019-07-03T17:44:24Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"invalid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1000","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:25Z" finished-at="2019-07-03T17:44:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="187" started-at="2019-07-03T17:44:25Z" finished-at="2019-07-03T17:44:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e38e254]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="FAIL" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue" duration-ms="4337" started-at="2019-07-03T17:44:25Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"invalid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1008","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":""}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Response Data Mismatch Failure  : not equal: value differences={errors=([{errorCode=PRG_PAM_DOC_020, message=Demographic record failed to fetch}], [{errorCode=PRG_PAM_DOC_022, message=DocumentId is not belongs to the pre-registration Id}])} expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Response Data Mismatch Failure  : not equal: value differences={errors=([{errorCode=PRG_PAM_DOC_020, message=Demographic record failed to fetch}], [{errorCode=PRG_PAM_DOC_022, message=DocumentId is not belongs to the pre-registration Id}])} expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at io.mosip.service.AssertResponses.assertResponses(AssertResponses.java:46)
	at io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(DeleteDocumentByDocId.java:183)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at io.mosip.testrunner.MosipTestRunner.startTestRunner(MosipTestRunner.java:42)
	at io.mosip.testrunner.MosipTestRunner.main(MosipTestRunner.java:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="157" started-at="2019-07-03T17:44:29Z" finished-at="2019-07-03T17:44:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b3feb26]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:29Z" finished-at="2019-07-03T17:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue status=FAILURE method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters" duration-ms="1345" started-at="2019-07-03T17:44:30Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"invalid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1002","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:31Z" finished-at="2019-07-03T17:44:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="140" started-at="2019-07-03T17:44:31Z" finished-at="2019-07-03T17:44:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2e4ecdf8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric" duration-ms="3662" started-at="2019-07-03T17:44:31Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"invalid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1001","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="176" started-at="2019-07-03T17:44:35Z" finished-at="2019-07-03T17:44:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@503a7990]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:35Z" finished-at="2019-07-03T17:44:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters" duration-ms="1339" started-at="2019-07-03T17:44:35Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"invalid","jiraId":"MOS-1007","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-03T17:44:36Z" finished-at="2019-07-03T17:44:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69a90b81]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:36Z" finished-at="2019-07-03T17:44:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue" duration-ms="3705" started-at="2019-07-03T17:44:36Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"invalid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1003","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:40Z" finished-at="2019-07-03T17:44:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="171" started-at="2019-07-03T17:44:40Z" finished-at="2019-07-03T17:44:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6dcbbb49]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric" duration-ms="1249" started-at="2019-07-03T17:44:40Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1006","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"invalid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="171" started-at="2019-07-03T17:44:42Z" finished-at="2019-07-03T17:44:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@35329a05]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:42Z" finished-at="2019-07-03T17:44:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters" duration-ms="3366" started-at="2019-07-03T17:44:42Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"invalid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1010","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","testCaseName":"DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:45Z" finished-at="2019-07-03T17:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-03T17:44:45Z" finished-at="2019-07-03T17:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@36c783ca]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength" duration-ms="1619" started-at="2019-07-03T17:44:45Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1004","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"invalid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="157" started-at="2019-07-03T17:44:47Z" finished-at="2019-07-03T17:44:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@17136390]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:47Z" finished-at="2019-07-03T17:44:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets" duration-ms="3764" started-at="2019-07-03T17:44:47Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1005","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"invalid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="183" started-at="2019-07-03T17:44:51Z" finished-at="2019-07-03T17:44:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@273293c8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:51Z" finished-at="2019-07-03T17:44:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters" duration-ms="1261" started-at="2019-07-03T17:44:51Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"invalid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1011","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","testCaseName":"DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-03T17:44:52Z" finished-at="2019-07-03T17:44:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6f1d799]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@21a5b599]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:52Z" finished-at="2019-07-03T17:44:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" duration-ms="3577" started-at="2019-07-03T17:44:52Z" data-provider="DeleteDocumentByDocId" finished-at="2019-07-03T17:44:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/DeleteDocumentByDocId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"DeleteDocumentByDocIdByPassingInvalidDocumentId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumeric":"valid","testType":"regression","DeleteDocumentByDocIdByPassingInvalidDocumentId_EmptyValue":"valid","DeleteDocumentByDocIdPassingInvalidDocumentId_SpecialCharacters":"valid","DeleteDocumentByDocIdPassingInvalidPreRegistrationId_SpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_EmptyValue":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_AlphaNumericAndSpecialCharacters":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumericAndSpecialCharacters":"valid","jiraId":"MOS-1009","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_AlphaNumeric":"valid","DeleteDocumentByDocIdByPassingInvalidDocumentId_GreaterThanMaxLength":"valid","testCaseName":"DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_Alphabets":"valid","DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength":"invalid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Pre Reg_DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9]" test-instance-name="DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-03T17:44:56Z" finished-at="2019-07-03T17:44:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteDocumentByDocIdByPassingInvalidPreRegistrationId_GreaterThanMaxLength status=SUCCESS method=DeleteDocumentByDocId.deleteDocumentByDocId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.DeleteDocumentByDocId@5af3afd9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
      </class> <!-- io.mosip.preregistration.tests.DeleteDocumentByDocId -->
    </test> <!-- PreReg Tests -->
  </suite> <!-- Mosip API Suite -->
</testng-results>
