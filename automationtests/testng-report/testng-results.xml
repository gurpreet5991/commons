<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="28" passed="28">
  <reporter-output>
  </reporter-output>
  <suite name="Mosip API Suite" duration-ms="85732" started-at="2019-07-04T04:39:20Z" finished-at="2019-07-04T04:40:46Z">
    <groups>
    </groups>
    <test name="PreReg Tests" duration-ms="85732" started-at="2019-07-04T04:39:20Z" finished-at="2019-07-04T04:40:46Z">
      <class name="io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId">
        <test-method status="PASS" signature="suiteSetup()[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="suiteSetup" is-config="true" duration-ms="16748" started-at="2019-07-04T10:09:04Z" finished-at="2019-07-04T10:09:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteSetup -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="5405" started-at="2019-07-04T10:09:20Z" finished-at="2019-07-04T10:09:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3a80c534]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="preReg_RetrivePreIdByRegCenterId_smoke" duration-ms="4295" started-at="2019-07-04T10:09:26Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"smoke","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"preReg_RetrivePreIdByRegCenterId_smoke","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1018","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preReg_RetrivePreIdByRegCenterId_smoke -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-07-04T10:09:30Z" finished-at="2019-07-04T10:09:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=preReg_RetrivePreIdByRegCenterId_smoke status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="268" started-at="2019-07-04T10:09:30Z" finished-at="2019-07-04T10:09:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@36e3321e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay" duration-ms="1402" started-at="2019-07-04T10:09:30Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"invalid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1005","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:32Z" finished-at="2019-07-04T10:09:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-04T10:09:32Z" finished-at="2019-07-04T10:09:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@218f2f51]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat" duration-ms="3776" started-at="2019-07-04T10:09:32Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1004","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:36Z" finished-at="2019-07-04T10:09:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="154" started-at="2019-07-04T10:09:36Z" finished-at="2019-07-04T10:09:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1d9af731]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets" duration-ms="1310" started-at="2019-07-04T10:09:36Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"invalid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1012","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:09:37Z" finished-at="2019-07-04T10:09:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@39afe59f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:37Z" finished-at="2019-07-04T10:09:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth" duration-ms="4053" started-at="2019-07-04T10:09:37Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"invalid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1006","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-07-04T10:09:41Z" finished-at="2019-07-04T10:09:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="139" started-at="2019-07-04T10:09:41Z" finished-at="2019-07-04T10:09:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@16f34376]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces" duration-ms="1509" started-at="2019-07-04T10:09:42Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1008","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:43Z" finished-at="2019-07-04T10:09:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-04T10:09:43Z" finished-at="2019-07-04T10:09:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4ede035e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength" duration-ms="3685" started-at="2019-07-04T10:09:43Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1017","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:47Z" finished-at="2019-07-04T10:09:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="173" started-at="2019-07-04T10:09:47Z" finished-at="2019-07-04T10:09:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@43756cb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields" duration-ms="1194" started-at="2019-07-04T10:09:47Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"invalid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1029","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:09:48Z" finished-at="2019-07-04T10:09:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4272d8cf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:48Z" finished-at="2019-07-04T10:09:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets" duration-ms="3664" started-at="2019-07-04T10:09:49Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"invalid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1000","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:09:52Z" finished-at="2019-07-04T10:09:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4e96cb04]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:52Z" finished-at="2019-07-04T10:09:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters" duration-ms="1349" started-at="2019-07-04T10:09:52Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1009","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:54Z" finished-at="2019-07-04T10:09:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="152" started-at="2019-07-04T10:09:54Z" finished-at="2019-07-04T10:09:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@70ecf57b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withSpaces" duration-ms="3636" started-at="2019-07-04T10:09:54Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"invalid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withSpaces","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1027","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withSpaces -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="140" started-at="2019-07-04T10:09:57Z" finished-at="2019-07-04T10:09:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@4e5364a3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:57Z" finished-at="2019-07-04T10:09:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withSpaces status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay" duration-ms="1167" started-at="2019-07-04T10:09:58Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:09:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"invalid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1024","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="166" started-at="2019-07-04T10:09:59Z" finished-at="2019-07-04T10:09:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a336906]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:09:59Z" finished-at="2019-07-04T10:09:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields" duration-ms="3781" started-at="2019-07-04T10:09:59Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1010","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="132" started-at="2019-07-04T10:10:03Z" finished-at="2019-07-04T10:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@62054faf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:03Z" finished-at="2019-07-04T10:10:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters" duration-ms="1262" started-at="2019-07-04T10:10:03Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1028","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:04Z" finished-at="2019-07-04T10:10:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:10:04Z" finished-at="2019-07-04T10:10:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@75d539b9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth" duration-ms="6073" started-at="2019-07-04T10:10:04Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[14]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1025","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="140" started-at="2019-07-04T10:10:10Z" finished-at="2019-07-04T10:10:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@20f63ddc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:10Z" finished-at="2019-07-04T10:10:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear" duration-ms="3781" started-at="2019-07-04T10:10:10Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1026","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-07-04T10:10:14Z" finished-at="2019-07-04T10:10:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="147" started-at="2019-07-04T10:10:14Z" finished-at="2019-07-04T10:10:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@210c1b9d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29" duration-ms="1232" started-at="2019-07-04T10:10:14Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"invalid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1022","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-04T10:10:16Z" finished-at="2019-07-04T10:10:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@69bc4024]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:16Z" finished-at="2019-07-04T10:10:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29 status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29" duration-ms="3608" started-at="2019-07-04T10:10:16Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[17]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1002","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:19Z" finished-at="2019-07-04T10:10:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29 status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:10:19Z" finished-at="2019-07-04T10:10:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@3578a45b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters" duration-ms="1237" started-at="2019-07-04T10:10:20Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1014","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:21Z" finished-at="2019-07-04T10:10:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="140" started-at="2019-07-04T10:10:21Z" finished-at="2019-07-04T10:10:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@24f177f5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue" duration-ms="3776" started-at="2019-07-04T10:10:21Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1015","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:25Z" finished-at="2019-07-04T10:10:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-04T10:10:25Z" finished-at="2019-07-04T10:10:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@65e05005]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29" duration-ms="1298" started-at="2019-07-04T10:10:25Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1021","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29 -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:26Z" finished-at="2019-07-04T10:10:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29 status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="161" started-at="2019-07-04T10:10:26Z" finished-at="2019-07-04T10:10:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@6ed691fd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces" duration-ms="3688" started-at="2019-07-04T10:10:26Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[21]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1016","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:30Z" finished-at="2019-07-04T10:10:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="141" started-at="2019-07-04T10:10:30Z" finished-at="2019-07-04T10:10:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@1efcba00]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets" duration-ms="1341" started-at="2019-07-04T10:10:30Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[22]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"invalid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","jiraId":"MOS-1019","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:32Z" finished-at="2019-07-04T10:10:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="156" started-at="2019-07-04T10:10:32Z" finished-at="2019-07-04T10:10:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@311d28f5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat" duration-ms="3723" started-at="2019-07-04T10:10:32Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[23]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"invalid","jiraId":"MOS-1023","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="1" started-at="2019-07-04T10:10:35Z" finished-at="2019-07-04T10:10:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="205" started-at="2019-07-04T10:10:35Z" finished-at="2019-07-04T10:10:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@569a26ab]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29" duration-ms="1251" started-at="2019-07-04T10:10:36Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[24]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"invalid","jiraId":"MOS-1003","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29 -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="172" started-at="2019-07-04T10:10:37Z" finished-at="2019-07-04T10:10:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@c190cfc]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:37Z" finished-at="2019-07-04T10:10:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29 status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue" duration-ms="3869" started-at="2019-07-04T10:10:37Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[25]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","jiraId":"MOS-1001","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="144" started-at="2019-07-04T10:10:41Z" finished-at="2019-07-04T10:10:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@77ce8bc5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:41Z" finished-at="2019-07-04T10:10:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric" duration-ms="1416" started-at="2019-07-04T10:10:41Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[26]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","jiraId":"MOS-1013","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"invalid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"valid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric -->
        <test-method status="PASS" signature="getTestCaseName(java.lang.reflect.Method, [Ljava.lang.Object;, org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="getTestCaseName" is-config="true" duration-ms="205" started-at="2019-07-04T10:10:42Z" finished-at="2019-07-04T10:10:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String,java.lang.Integer,org.json.simple.JSONObject) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Object;@2fcc5f49]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestCaseName -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:42Z" finished-at="2019-07-04T10:10:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" duration-ms="3543" started-at="2019-07-04T10:10:43Z" data-provider="RetrivePreIdByRegCenterId" finished-at="2019-07-04T10:10:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[preReg/RetrivePreIdByRegCenterId]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[27]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDay":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withInvalidMonth":"valid","testType":"regression","prereg_RetrivePreIdByRegCenterId_fromDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueGreaterThanMaxLength":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDay":"valid","testCaseName":"prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue","prereg_RetrivePreIdByRegCenterId_fromDate_withZeroInAllFields":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidMonth":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidYear":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebNonLeapYearWith29":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumericAndSpecialCharacters":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withFebGreaterThan29":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsSpaces":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withAlphabets":"valid","prereg_RetrivePreIdByRegCenterId_toDate_withInvalidDateFormat":"valid","prereg_RetrivePreIdByRegCenterId_fromDate_withFebNonLeapYearWith29":"valid","jiraId":"MOS-1011","prereg_RetrivePreIdByRegCenterId_fromDate_withEmptyValue":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidValueAsAlphaNumeric":"valid","prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue":"invalid","status":"Pass"}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue -->
        <test-method status="PASS" signature="setResultTestName(org.testng.ITestResult)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="setResultTestName" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:46Z" finished-at="2019-07-04T10:10:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue status=SUCCESS method=RetriveAllPreRegIdByRegCenterId.retrivePreRegistrationByRegistrationCenterId(java.lang.String, java.lang.Integer, org.json.simple.JSONObject)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setResultTestName -->
        <test-method status="PASS" signature="testTearDown(org.testng.ITestContext)[pri:0, instance:io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId@158da8e]" test-instance-name="prereg_RetrivePreIdByRegCenterId_registrationCenterId_withInvalidNonExistingValue" name="testTearDown" is-config="true" duration-ms="0" started-at="2019-07-04T10:10:46Z" finished-at="2019-07-04T10:10:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@fd5689d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTearDown -->
      </class> <!-- io.mosip.preregistration.tests.RetriveAllPreRegIdByRegCenterId -->
    </test> <!-- PreReg Tests -->
  </suite> <!-- Mosip API Suite -->
</testng-results>
