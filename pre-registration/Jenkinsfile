node {
 def server = Artifactory.server 'ART'
 def rtMaven = Artifactory.newMavenBuild()
 def buildInfo
 def branch = env.NEXT_BRANCH_NAME
 def projectToBuild = 'pre-registration'
 def registryUrl = 'http://docker-registry.mosip.io:5000'
 def registryName = 'docker-registry.mosip.io:5000'
 def registryCredentials = '305c7f35-2eb5-44b4-b574-a0855ef70c26'
 k8DevContext = 'dev-k8-cluster'

 stage('------- Checkout --------') {
  // Checkout only pre-registration Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip', credentialsId: '4c9741a2-4c15-4aad-a13d-3a1206u05321']
    ],
    extensions: [

     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild + '/.*'],
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: '/' + projectToBuild + '/']
     ]]

    ],
   ])
  }
 }

 stage('--------- Artifactory configuration ----------------') {
  rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
  rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
  rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
  buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
 }

stage ('---------- build ---------------') {
	// for building java projects
        rtMaven.run pom: branch + '/' + projectToBuild + '/pom.xml', goals: 'clean install -X', buildInfo: buildInfo
 	// For building angular project
	dir(branch) {
		// Looking for angular.json file to to find out if the submodule we are building is an angular project
		echo "Looking for angular projects to build"
		sh "find . -name 'angular.json'> directoryAngularFiles"
		locationOfAngularFiles = readFile( "directoryAngularFiles" ).split( "\\r?\\n" );
		for (int i=0; i < locationOfAngularFiles.size(); i++) {
			if(locationOfAngularFiles[i].equals("")){
			break;
			}
			def currentModule = locationOfAngularFiles[i]
			sh "dirname $currentModule > parentDirectoryPath"
			parentDirectoryPath = readFile('parentDirectoryPath').trim()
			sh "rm -f parentDirectoryPath"
			parentDirectoryPathFormatted = parentDirectoryPath.substring(1);
			// to check if angular.json is present in root of submodule to build, for this purpose checking if
			// Dockerfile is present in same directory.
			currentWorkingPath = pwd()
			// creating absolute path to the Dockerfile
			fileToLookFor= currentWorkingPath+parentDirectoryPathFormatted+"/Dockerfile"
			sh "pwd"
			echo fileToLookFor
			def file= new File(fileToLookFor)
			print file.exists()
			if(file.exists()){
			// installing node modules and building the angular project
			sh "pushd $parentDirectoryPath && npm install && npm run-script build -- --configuration=dev-k8 --output-path=dist && popd"
			}
		}
	}
}

 stage('---------- SonarQube Analysis --------------') {
  def mvnHome = tool name: 'M2_HOME', type: 'maven'
  withSonarQubeEnv('sonar') {
   sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild/' sonar:sonar"
  }
 }

 stage('----------- Publish build info -------------') {
  server.publishBuildInfo buildInfo
 }

 stage('-----------Docker image push and cleanup-----------') {
  dir(branch) {
   sh "find . -name 'Dockerfile'> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   for (int i = 0; i < locationOfDockerFiles.size(); i++) {
    if (locationOfDockerFiles[i].equals("")) {
     break;
    }
    def currentModule = locationOfDockerFiles[i]
    sh "basename `dirname $currentModule` > parentDirectoryName"
    parentDirectoryName = readFile('parentDirectoryName').trim()
    sh "rm -f parentDirectoryName"
    sh "dirname $currentModule > parentDirectoryPath"
    parentDirectoryPath = readFile('parentDirectoryPath').trim()
    sh "rm -f parentDirectoryPath"
    docker.withRegistry(registryUrl, registryCredentials) {
     def buildName = "$parentDirectoryName:$BUILD_NUMBER"
     newApp = docker.build(buildName, '-f ' + locationOfDockerFiles[i] + ' ' + parentDirectoryPath)
     newApp.push()
     newApp.push 'latest'
    }
    sh "docker rmi $parentDirectoryName:$BUILD_NUMBER"
    sh "docker rmi $registryName/$parentDirectoryName:$BUILD_NUMBER"
    sh "docker rmi $registryName/$parentDirectoryName"
   }
  }
 }
	
	stage('Kubernetes Deploy : DEV-INT'){
      //this stage will rollout the changes on Kubernetes Cluster
      sh "kubectl config use-context $k8DevContext"
     
	sh "kubectl set image deployment/pre-registration-auth-service pre-registration-auth-service=docker-registry.mosip.io:5000/pre-registration-auth-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-batchjob-service pre-registration-batchjob-service=docker-registry.mosip.io:5000/pre-registration-batchjob-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-booking-service pre-registration-booking-service=docker-registry.mosip.io:5000/pre-registration-booking-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-datasync-service pre-registration-datasync-service=docker-registry.mosip.io:5000/pre-registration-datasync-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-demographic-service pre-registration-demographic-service=docker-registry.mosip.io:5000/pre-registration-demographic-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-document-service pre-registration-document-service=docker-registry.mosip.io:5000/pre-registration-document-service:$BUILD_NUMBER"
sh "kubectl set image deployment/pre-registration-ui pre-registration-ui=docker-registry.mosip.io:5000/pre-registration-ui:$BUILD_NUMBER"
		
      echo "Getting list of all services" 
      sh "kubectl get services"
    }
}
