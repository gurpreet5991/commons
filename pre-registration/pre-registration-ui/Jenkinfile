node {
 def branch = 'DEV'
 projectToBuild = 'pre-registration/pre-registration-ui'
 def registryUrl = 'http://mosip-dev-admin.southindia.cloudapp.azure.com:5000'
 def registryName = 'mosip-dev-admin.southindia.cloudapp.azure.com:5000'

 stage('------- Checkout --------') {
  // Checkout only Kernel Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip', credentialsId: '4c9741a2-4c15-4aad-a13d-3a1206u05321']
    ],
    extensions: [

     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild + '/.*'],
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: projectToBuild + '/']
     ]]

    ],
   ])
  }
 }
 
 stage('-----------Docker image push and cleanup-----------') {
  dir(branch) {
   sh "find . -name 'Dockerfile'> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   showChangeLogs();
   for (int j = 0; j < changedModules.size(); j++) {
    for (int i = 0; i < locationOfDockerFiles.size(); i++) {
     if(locationOfDockerFiles[i].equals("")){
     break;
     }
     echo locationOfDockerFiles[i]
     def currentModule = locationOfDockerFiles[i]
     sh "basename `dirname $currentModule` > parentDirectoryName"
     parentDirectoryName = readFile('parentDirectoryName').trim()
     sh "rm -f parentDirectoryName"
     sh "dirname $currentModule > parentDirectoryPath"
     parentDirectoryPath = readFile('parentDirectoryPath').trim()
     sh "rm -f parentDirectoryPath"

     parentDirectoryPathForamtted = parentDirectoryPath.substring(2);

     echo "------------------------" + changedModules[j]
     echo ">>>>>>>>>>>>>>>>>>>>>>>>" + parentDirectoryPathForamtted

     if (changedModules[j].contains(parentDirectoryPathForamtted)) {
      echo parentDirectoryPathForamtted + " will be built"
      docker.withRegistry(registryUrl) {
      def buildName = "$parentDirectoryName:$BUILD_NUMBER"
      newApp = docker.build(buildName, '-f ' + locationOfDockerFiles[i] + ' ' + parentDirectoryPath)
      newApp.push()
      newApp.push 'latest'
      }
      sh "docker rmi $parentDirectoryName:$BUILD_NUMBER"
      sh "docker rmi $registryName/$parentDirectoryName:$BUILD_NUMBER"
      sh "docker rmi $registryName/$parentDirectoryName"

     }
    }


   }

  }
 }


}
