node{
 	def server = Artifactory.server 'ART'
    	def rtMaven = Artifactory.newMavenBuild()
    	def buildInfo
	def branch = 'DEV'
	def projectToBuild = 'kernel/'
	def registry = 'mosip/mosip-build-repos'
    	def registryCredential = '4656e6d8-314f-4be5-8bd9-2bf45dce1ed5'
	
	stage('SCM CHECKOUT') {
	// Checkout only Kernel Module
    	dir(branch) {
      	checkout([$class: 'GitSCM',
                branches: [[name: branch]],
                userRemoteConfigs: [[url:'https://github.com/mosip/mosip', credentialsId:'4c9741a2-4c15-4aad-a13d-3a1206u05321']],
                extensions: [
                  
                  [$class: 'PathRestriction',excludedRegions: '', includedRegions: 'kernel/.*'],
                  [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:projectToBuild]]]
                   
                ],
               ])
    	}
	}
	
	stage('Compile-Package'){
        // Get maven home path
        def mvnHome =  tool name: 'M2_HOME', type: 'maven'   
        sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild' compile"
   } 
   
   stage('SonarQube Analysis') {
        def mvnHome =  tool name: 'M2_HOME', type: 'maven'
        withSonarQubeEnv('sonar') { 
        sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild' sonar:sonar"
        }
    }
	
   stage ('Artifactory configuration') {
	rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
        buildInfo = Artifactory.newBuildInfo()
	buildInfo.env.capture = true
		}
   stage ('Exec Maven') {
        rtMaven.run pom: 'DEV/kernel/pom.xml', goals: 'clean install', buildInfo: buildInfo
    }

	stage ('Publish build info') {
        server.publishBuildInfo buildInfo
    }
	stage('Build image') {
	dir(branch){
        docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
		    def buildName = registry + ":$BUILD_NUMBER"
			newApp = docker.build(buildName, '-f kernel/kernel-auditmanager-service/Dockerfile .')
			newApp.push()
		}
        }
	}
	stage('Register image') {
	    
        docker.withRegistry('https://registry.hub.docker.com', registryCredential) {
    		newApp.push 'latest'
        }
	}
    stage('Remove image from local') {
		sh "docker rmi $registry:$BUILD_NUMBER"
		sh "docker rmi registry.hub.docker.com/$registry:$BUILD_NUMBER"
		
		
		
    }
}
