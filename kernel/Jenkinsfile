node {
 def server = Artifactory.server 'ART'
 def rtMaven = Artifactory.newMavenBuild()
 def buildInfo
 def branch = 'DEV'
 def projectToBuild = 'kernel'
 def registry = 'http://mosip-dev-admin.southindia.cloudapp.azure.com:5000'

 stage('------- Checkout --------') {
  // Checkout only Kernel Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip', credentialsId: '4c9741a2-4c15-4aad-a13d-3a1206u05321']
    ],
    extensions: [

     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild +'/.*'],
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: projectToBuild + '/']
     ]]

    ],
   ])
  }
 }

 stage('--------- Artifactory configuration ----------------') {
  rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
  rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
  rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
  buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
 }
 
stage ('---------- mvn-clean-install ---------------') {
        rtMaven.run pom: branch + '/' + projectToBuild + '/pom.xml', goals: 'clean install -DskipTests', buildInfo: buildInfo
}

 stage('---------- SonarQube Analysis --------------') {
  def mvnHome = tool name: 'M2_HOME', type: 'maven'
  withSonarQubeEnv('sonar') {
   sh "${mvnHome}/bin/mvn -f '$branch/$projectToBuild/' sonar:sonar"
  }
 }

 stage('----------- Publish build info -------------') {
  server.publishBuildInfo buildInfo
 }
 
 stage('------------ Build docker image ------------') {
  dir(branch) {
   docker.withRegistry(registry) {
    def buildName = "kernel-auditmanager-service:$BUILD_NUMBER"
    newApp = docker.build(buildName, '-f kernel/kernel-auditmanager-service/Dockerfile kernel/kernel-auditmanager-service/')
    newApp.push()
   }
  }
 }
 
 stage('------------- Register docker image ----------------') {

  docker.withRegistry(registry) {
   newApp.push 'latest'
  }
 }
 
 stage('------------- Remove docker image from local --------') {
  sh "docker rmi kernel-auditmanager-service:$BUILD_NUMBER"
  sh "docker rmi $registry/kernel-auditmanager-service:$BUILD_NUMBER"
 }
}
