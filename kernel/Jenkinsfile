node {
 def server = Artifactory.server 'ART'
 def rtMaven = Artifactory.newMavenBuild()
 def buildInfo
 def branch = 'DEV'
 projectToBuild = 'kernel'
 def registryUrl = 'http://mosip-dev-admin.southindia.cloudapp.azure.com:5000'
 def registryName = 'mosip-dev-admin.southindia.cloudapp.azure.com:5000'
 targetDeploymentServer = 'kernel-dev-server'
 containersToRun = ''
 containerNames= ''

 stage('------- Checkout --------') {
  // Checkout only Kernel Module
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: 'https://github.com/mosip/mosip', credentialsId: '4c9741a2-4c15-4aad-a13d-3a1206u05321']
    ],
    extensions: [

     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild + '/.*'],
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: projectToBuild + '/']
     ]]

    ],
   ])
  }
 }

 stage('--------- Artifactory configuration ----------------') {
  rtMaven.tool = 'M2_HOME' // Tool name from Jenkins configuration
  rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
  rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
  buildInfo = Artifactory.newBuildInfo()
  buildInfo.env.capture = true
 }

 stage('---------- mvn-clean-install ---------------') {
  rtMaven.run pom: branch + '/' + projectToBuild + '/pom.xml', goals: 'clean install -DskipTests', buildInfo: buildInfo
 }


 stage('----------- Publish build info -------------') {
  server.publishBuildInfo buildInfo
 }

 stage('-----------Docker image push and cleanup-----------') {
  dir(branch) {
   sh "find . -name 'Dockerfile'> directoryDockerFiles"
   locationOfDockerFiles = readFile("directoryDockerFiles").split("\\r?\\n");
   sh "rm -f directoryDockerFiles"
   showChangeLogs();
   for (int j = 0; j < changedModules.size(); j++) {
    for (int i = 0; i < locationOfDockerFiles.size(); i++) {
     if(locationOfDockerFiles[i].equals("")){
     break;
     }
     def currentModule = locationOfDockerFiles[i]
     sh "basename `dirname $currentModule` > parentDirectoryName"
     parentDirectoryName = readFile('parentDirectoryName').trim()
     sh "rm -f parentDirectoryName"
     sh "dirname $currentModule > parentDirectoryPath"
     parentDirectoryPath = readFile('parentDirectoryPath').trim()
     sh "rm -f parentDirectoryPath"

     parentDirectoryPathForamtted = parentDirectoryPath.substring(2);
     if (changedModules[j].contains(parentDirectoryPathForamtted)) {
     echo "Updating changed images list"
     containersToRun=containersToRun+" "+registryName+'/'+parentDirectoryName
     containerNames=containerNames+" "+parentDirectoryName
      echo parentDirectoryPathForamtted + " will be built"
      docker.withRegistry(registryUrl) {
      def buildName = "$parentDirectoryName:$BUILD_NUMBER"
      newApp = docker.build(buildName, '-f ' + locationOfDockerFiles[i] + ' ' + parentDirectoryPath)
      newApp.push()
      newApp.push 'latest'
      }
      sh "docker rmi $parentDirectoryName:$BUILD_NUMBER"
      sh "docker rmi $registryName/$parentDirectoryName:$BUILD_NUMBER"
      sh "docker rmi $registryName/$parentDirectoryName"

    }
    }


   }

  }
 }
 
  stage('----deploy----')
 {
	  command = """
 		INDEX=0
		containersToRunShell=(${containersToRun})
		containerNamesShell=(${containerNames})
		
 		for i in "\${containersToRunShell[@]}"
			do
			  echo "Deploying Service - " \$i
			  docker pull \$i
			  portExposed="\$(docker inspect --format='{{range \$p, \$conf := .Config.ExposedPorts}} {{index (split \$p "/") 0}} {{end}}' \$i)"
			  portExposedFormatted="\$(echo \$portExposed| xargs)"
			  echo Container will expose services on \$portExposedFormatted 
			 if [ "\$(docker ps -a | grep \${containerNamesShell[\$INDEX]})" ]; then
			  docker rename \${containerNamesShell[\$INDEX]} \${containerNamesShell[\$INDEX]}-backup && docker stop \${containerNamesShell[\$INDEX]}-backup
			 fi
			 docker run -d -p \$portExposedFormatted:\$portExposedFormatted --name "\${containerNamesShell[\$INDEX]}" \$i 
    """
  sshPublisher(publishers: [sshPublisherDesc(configName: targetDeploymentServer, transfers: [sshTransfer(execCommand: "$command")])])
    }

}


@NonCPS
def showChangeLogs() {
 def changeLogSets = currentBuild.changeSets
 changedModules = []
 for (int i = 0; i < changeLogSets.size(); i++) {
  def entries = changeLogSets[i].items
  for (int j = 0; j < entries.length; j++) {
   def entry = entries[j]
   echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
   def paths = new ArrayList(entry.affectedPaths)
   for (int k = 0; k < paths.size(); k++) {
    def path = paths[k]
    if (path.startsWith(projectToBuild)) {
     changedModules.add(path);
    }

   }
  }
 }
}
