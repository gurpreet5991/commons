#Port where mosip spring cloud config server needs to run
server.port = 51000

#adding context path
server.servlet.path=/config

#Git repository location where configuration files are stored
spring.cloud.config.server.git.uri=git@github.com:mosip/mosip.git

#Path inside the GIT repo where config files are stored, in our case they are inside config directory
spring.cloud.config.server.git.search-paths=config

#Server would return a HTTP 404 status, if the application is not found.By default, this flag is set to true.
spring.cloud.config.server.accept-empty=false

#Spring Cloud Config Server makes a clone of the remote git repository and if somehow the local copy gets 
#dirty (e.g. folder content changes by OS process) so Spring Cloud Config Server cannot update the local copy
#from remote repository. For Force-pull in such case, we are setting the flag to true.
spring.cloud.config.server.git.force-pull=true

# Disabling health endpoints to improve performance of config server while in development, can be commented out in future.
health.config.enabled=false
spring.cloud.config.server.health.enabled=false

# Setting up refresh rate to 1 minute so that config server will check for updates in Git repo after every one minute,
#can be lowered down for production.
spring.cloud.config.server.git.refreshRate=60

#disabling health check so that client doesnt try to load properties from sprint config server every
# 5 minutes (should not be done in production)
health.config.enabled=false

# adding provision to clone on start of server instead of first request
spring.cloud.config.server.git.cloneOnStart=true
